############## mod 8 lesson 1 ##################
################ Libraries ################### 

Get-Process explorer : Query for the explorer process
(Get-Process explorer).Modules : To view the loaded modules for the explorer process,

Run the following commands to find the processes for the specified module:
$processes = Get-Process
foreach($process in $processes) {
 foreach($module in $process.Modules){
  if ($module.ModuleName -eq 'advapi32.dll'){
   $process
  }
 }
}


$credentials = Get-Credential : Run the following command to store the credentials for the remote computer
Invoke-Command -Credential $credentials -ComputerName 'cda-dc' -ScriptBlock {Get-Process} : Use Invoke-Command to query the currently running processes on the remote computer
$processes = Invoke-Command -Credential $credentials -ComputerName 'cda-dc' -ScriptBlock {Get-Process} : further analyze the processes, use the following command to copy the collection locally

Enter the following commands to filter the processes for specific loaded modules

foreach($process in $processes) {
 foreach($module in $process.Modules){
  if ($module -like '*advapi32.dll*'){
   $process
  }
 }
}

Compiling and Executing a Library for AppInit_DLLs ##################

Compile the library using MinGW’s GNU Compiler Collection (GCC
gcc -shared -o dllmain.dll dllmain.cpp : Compile the library using MinGW’s GNU Compiler Collection (GCC):

GCC is executed using the following parameters:
- shared: Indicates output should be a shared library
- o: Indicates the path to the output file (dllmain.dll in this case)
- unnamed parameters: Input files to be used (dllmain.cpp in this case)

Detection #######################

the following PowerShell commands determine if the current system is configured with AppInit DLLs:
Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows" -Name "LoadAppInit_DLLs"
Get-ItemProperty -Path "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows" -Name "LoadAppInit_DLLs"

from before, If any of these commands returns a 1, then the system is configured to use AppInit. The library or libraries loaded are discerned via:
Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows" -Name "AppInit_DLLs"

############## mod 8 lesson 2 ##################
################ Libraries ################### 

taskkill /PID 4376 /F : kills task base of pid
taskkill /IM notepad.exe /F : kills task base off of process name


Get-Process -name "firefox"
Get-Process -id 252
Get-Process -name exp*,pow*
Stop-Process -name firefox
Start-Process -FilePath "notepad.exe"
Stop-Process -id 212
Get-Process -name powershell -IncludeUserName

Run the following command to see which parent process ID spawns the running processes
important : Get-CimInstance -Class Win32_Process | Select-Object ProcessId,ProcessName,ParentProcessId

Print the WMI object for the powershell.exe process with the command
Get-CimInstance -class Win32_Process -filter "name = 'powershell.exe'" | Format-List *

Use the WMI GetOwner method with the command
Get-CimInstance -class Win32_Process -filter "name = 'powershell.exe'" | Invoke-CimMethod -MethodName GetOwner | Format-List *


invoke-command cda-acct-1, cda-acct-2, cda-acct-3 -scriptblock {get-process powershell -module}


Get-ciminstance -class win32_process -filter "name = 'powershell.exe'" -computername cda-acct-1 | select processname, processid, 
parentprocessid


Get-ciminstance -class win32_process -filter "processid = '2872'" -computer cda-acct-1 | select processname, processid


Get-ciminstance -class win32_process -filter "name = 'powershell.exe'" -computername cda-acct-1 | format-list *


invoke-command -computername cda-acct-1 -scriptblock {get-process -name powershell -includeusername}


invoke-command -computername cda-acct-1 -scriptblock {(get-process -name powershell -includeusername).username}

############## mod 8 lesson 3 ##################
################ Windows API ################### 

tasklist /fi "imagename eq explorer.exe" /m : List all libraries loaded for the explorer.exe process
tasklist /s 172.16.3.2 /u Administrator /fi "imagename eq wmiprvse.exe" /m : List all libraries loaded for the wmiprvse.exe process on a remote computer
Get-Process “explorer” | Select-Object -ExpandProperty Modules -ErrorAction SilentlyContinue | Format-Table -Autosize :  view DLLs loaded by the explorer.exe process on the local machine,
listdlls -h : pen the help menu for the utility with the command

List all DLLs loaded by cmd.exe with the following command
listdlls cmd
listdlls -r cmd

List all processes that have loaded the DLL advapi32.dll with the following command:
listdlls -d advapi32.dll | more


############## mod 9 lesson 1 ##################
################ Registry ################### 

 Get-ChildItem -Path Registry::HKEY_Current_User : get path
 Get-ItemProperty -Path : is used for registry keys to return the values for that key

Get-ChildItem -Path Registry::HKCU : cmdlet to list the registry keys under the HKCU root key:
Get-ItemProperty -PATH Registry::HKCU\Environment : Query the HKCU\Environment key
Get-ItemProperty -PATH Registry::HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run | select * -Exclude PS* : Query the HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run key


Get-ChildItem -Path Registry::HKLM\SYSTEM\CurrentControlSet\Enum\USBSTOR -Recurse : Query the HKLM\SYSTEM\CurrentControlSet\Enum\USBSTOR with the -Recurse option:
Get-ItemProperty -Path Registry::HKLM\SYSTEM\MountedDevices : Query the HKLM\SYSTEM\MountedDevices key:
Get-ChildItem -Path Registry::HKLM\SYSTEM\CurrentControlSet\Services : Query the HKLM\SYSTEM\CurrentControlSet\Services key:

powershell

Run the following commands to create a new registry key, copy a value from one key to another key, verify the changes, and remove the copy: next 5 commands

New-Item -path Registry::HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce

Copy-ItemProperty -Path Registry::HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run -name OneDrive -Destination Registry::hkcu\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce

Get-ItemProperty -Path Registry::HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce

Remove-Item -path Registry::HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce

Get-ItemProperty -Path Registry::HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce :  second Get-ItemProperty command verifies that the key was removed and shows an error message.
powershell

command line
reg /? : Run the reg command with the help switch (/?)

The reg command has the following syntax:
reg (QUERY | ADD | DELETE | COPY | SAVE | LOAD | UNLOAD | RESTORE | COMPARE | EXPORT | IMPORT | FLAGS) [Parameter List]

reg query /? : following command to review the help for the query operation
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run : following command to query the processes running
reg add HKLM\Software\Microsoft\Windows\CurrentVersion\Run /v test /t REG_SZ /d “c:\Windows\System32\notepad.exe” : following commands to add a value to a key and validate that it was added
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run : check last command 

The following switches provide specific information:
/v: Value
/t: Data type
/d: Actual data to assign to the value
/f to force an overwrite of the existing value with the same name.

reg delete HKLM\Software\Microsoft\Windows\CurrentVersion\Run /v test : following command to delete the key, and enter Yes to the prompt
reg add HKLM\Software\Microsoft\Windows\CurrentVersion\Run\test : Run the following command to add a subkey
Run the following commands to delete the subkey and verify it was deleted next 2 commands
reg delete HKLM\Software\Microsoft\Windows\CurrentVersion\Run\test
reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run
notice now there are onlt 2 and test was deleted
command line

powershell
Get-Help Get-ItemProperty : help for the command let
Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run :  following command to query the value of the Run key

Run the following commands to add a registry value and verify: next 2 commands
Set-ItemProperty -path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run' -Name 'test' -value 'C:\Windows\System32\notepad.exe'
Get-ItemProperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

Run the following commands to change test value to calc.exe from notepad.exe from pervious 2 command: next 2 commands
Set-ItemProperty -path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run' -Name 'test' -value 'C:\Windows\System32\calc.exe'
Get-ItemProperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run 

Run the following commands to rename the test value to test2 and verify: next 2 commands
Rename-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run' -Name 'test' -NewName 'test2'
Get-ItemProperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

Run the following commands to delete the test2 value and verify deletion: next 2 commands
Remove-ItemProperty -path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run' -Name 'test2'
Get-ItemProperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
powershell

powershell

following command to prepare to store credentials in a variable ($cred) for use in an upcoming remote command:
$cred=Get-Credential

following command to execute a remote command to query the ProfileList key on cda-dc — 174.16.1.6
Invoke-Command -ComputerName cda-dc -Credential $cred -Command {Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList'}

Invoke-Command cmdlet uses the capabilities of PowerShell to run commands on remote systems and takes advantage of the domain trust relationship for authentication. The system to run the command on is specified by -ComputerName cda-dc with the logon credentials supplied from the variable saved by the Get-Credential cmdlet in Step 9. The actual command to execute is enclosed in braces ({…}) and is the same command run locally to retrieve the profile list from the registry.


Since cda-hr-1 is a part of the cda.corp domain, the trust relationship allows the remote access using PowerShell without any additional configuration. From a non-domain member computer, there may be additional configuration requirements to use PowerShell for remote management.

powershell


############## mod 9 lesson 2 ##################
################ Services ################### 


command line
tasklist /svc : view the running processes and any services associated with them
sc query :  query the status of all services on cda-win-hunt
sc query spooler : query the status of the Print Spooler service:
sc queryex spooler :  query the extended status of the Print Spooler service
sc qc spooler : query the configuration settings for the Print Spooler service
sc qdescription spooler : query the description of the Print Spooler service
sc query state= all : view all configured services and drivers
sc qprivs spooler : view the privileges of the Print Spooler service
qprivs option to SC shows the security privileges associated with a service. Since most services run under the context of the Local System user, which has elevated permissions. Threat actors often target services that have elevated privileges in order to elevate their current access or hide
image saved priv&secription
command line

command line
sc \\cda-dc query : command to remotely query the services on the cda-dc VM
sc \\cda-dc stop spooler : command to remotely stop the Print Spooler service on cda-dc
sc \\cda-dc query spooler :  command to check the status of the Print Spooler service after sending the stop command
sc \\cda-dc start spooler :  In the Administrator: Command Prompt, run the following command to restart the Print Spooler service:
command line 

powershell
Get-Service -computer cda-dc : command to remotely query the services on cda-dc:
Get-Service -computer cda-dc "spool*" :  command to query the status of services like the term spool:
Get-Service -computer cda-dc "spool*" | Select-Object * : command to view the properties associated with a service object returned from the Get-Service cmdlet
Get-CIMInstance win32_service | ?{$_.Name -like '*spool*'} | select * :  command to use WMI to view the details of the Print Spooler local service
Get-CIMInstance -ComputerName cda-dc win32_service | ?{$_.Name -like '*spool*'} | select * : command to view the details of the Print Spooler service on cda-dc
powershell

powershell
certutil -adca : command to view the CA certificates registered with the AD domain, notice (Signature matches Public Key
																																																																																												Root Certificate: Subject matches Issuer)
nugget used in class lab commands was able to get all question awnsered on just using the first command
Get-ciminstance -computername cda-dc,cda-file,cda-exec-1,cda-exec-2,cda-exec-3,cda-hr-1,cda-hr-2,cda-hr-3,cda-mail win32_service | where name -like '*sysmon*' | where name -notlike 'sysmon64' | select *


Get-ciminstance win32_service cda-mail | where name -eq 'sysmon32' | select *


Get-ciminstance -computername cda-dc,cda-file,cda-exec-1,cda-exec-2,cda-exec-3,cda-hr-1,cda-hr-2,cda-hr-3,cda-mail win32_service | where Name -like '*sysmon*' | select *
powershell

############## mod 9 lesson 3 ##################
################ Windows Logging ################### 

command line
wevtutil /? : command to see the manual for wevutil.exe
wevtutil qe System /c:5 /f:text /rd : command to show the five most recent log entries in the System log:
The qe option followed by System is the syntax for querying events from the specified System log
The /c:5 option tells this utility to display a count of the last five entries
The /f:text option tells this utility to format the output in readable text; the default output format is XML.
The /rd option tells this utility to list events in reverse direction, which means newest first.
While not necessary here, if the output is too long for the user to scroll through, it can be helpful to pipe it to a terminal scroll utility using the syntax | more, or write it to a file using the syntax >> file.txt.

wevtutil qe System /c:1  : see the default — i.e., difficult to read — format looks like, run the following command with no formatting flags:
wevtutil qe System /q:"*[System[(EventID=104)]]" /f:text : command to return all System logs with event ID 104 — Log clear:
wevtutil qe System /q:"*[System[(Level=2)]]" /f:text | more : command to retrieve all Error level logs in the System log
wevtutil qe System /q:"*[System[(Level=2 or Level=3)]]" /f:text | more : command to retrieve all Error and Warning level logs in the System log.

It may be necessary to run these commands on a remote computer to which an analyst has authenticated access. The format for such a command is
wevtutil /r:[computer name OR IP] /u:[username] /p:[password] [remaining options]

wevtutil /r:CDA-ACCT-1 /u:"CDA\trainee" /p:"Th1s is 0perational Cyber Training!" qe System /c:1 /f:text /rd : List the most recent event of the System log on remote system CDA-ACCT-1 with the command:

The wevtutil.exe utility is a powerful tool for searching through Windows event logs, especially when combined with the knowledge of which event log IDs are of interest to the analyst performing such queries during a CPT hunt or clear operation. 
command line

powershell
Get-Help Get-WinEvent : 
Get-WinEvent -ListLog * : command to list the number of log entries in each event log:
Get-WinEvent -LogName System | Select-Object -First 5 : command to obtain the five most recent entries in the System log
Get-WinEvent -LogName System | Group-Object -Property ProviderName -NoElement | Sort-Object -Property Count -Descending | Format-Table Name,Count : command to determine how many entries in a log file are from a specific source

This command employs several additional cmdlets to improve the query:
The Get-WinEvent cmdlet uses:The 
-LogName parameter to specify the System log;
The event objects are sent down the pipeline to the Group-Object cmdlet. 
The Group-Object cmdlet takes all the objects streamed from another cmdlet’s output and groups them by a specified field.
The -Property option takes as its value a property name, in this case Source, as the field to group objects.
The -NoElement option omits the members of the group from the output. This prevents the logs themselves from being included and returns only the counts and associated sources.
he Sort-Object cmdlet sorts the input stream by specified fields.
The -Property option takes as its value a property name, in this case Count, as the field to sort objects.
The -Descending option is the direction in which to sort the objects, in this case from highest to lowest.
The | Format-Table cmdlet appended to the end of the command formats the output so that each property of each object returned is printed in an appropriately-sized column. This formatting makes some output more readable and prevents long strings from being truncated. 
In this command, the fields Name,Count are specified to include in the formatted table. Alternatively, the wildcard * is used to specify that all fields should be included.
When there are too many properties in the objects returned as output, Format-List performs a similar function, but with each property printed on its own line in a list of objects.
The cmdlet Out-Gridview performs a similar and comparable function to Format-List.

Get-WinEvent cmdlet can also be used to find all events of a specific logging level with the following syntax:
Get-WinEvent [options] | Where-Object -Property Level -EQ [Level #]

Get-WinEvent -LogName System | Where-Object -Property Level -eq 2 | Format-Table Level,Id,Message : command to obtain all errors from a specific log file:

All logs of a specific event ID can be obtained with the following syntax
Get-WinEvent [options] | Where-Object -Property ID -EQ [Event ID]

Get-WinEvent -LogName System | Where-Object -Property ID -EQ 104 : command to obtain all events in which a log file was cleared (event ID 104)
Get-WinEvent -LogName System | Where-Object -Property Message -Match 'winlogbeat' | Format-List * :  command to obtain all logs with winlogbeat in the event description

To search events that occurred during a specific time window define the $Begin and $End variables for the query: next 3 commands
$Begin = '5/24/2021'
$End = '5/26/2021'
Get-WinEvent -FilterHashtable @{LogName="System"; StartTime=$Begin; EndTime=$End} | Format-List TimeCreated,Id,Message

 -FilterHashTable option takes as a value a hash table of the form @{[property]=[value],…}. Hash tables are a powerful query mechanism.


 with wevtutil.exe, it may be necessary to run any of these PowerShell cmdlets on a remote computer to which an analyst has authenticated access. The format for such a command is
Invoke-Command -ComputerName [Computer Name] -ScriptBlock {[PowerShell Expression]}

Invoke-Command -ComputerName CDA-ACCT-1 -ScriptBlock {Get-WinEvent -LogName System | Select-Object -First 1 | Format-List *} : Retrieve the most recent event from the System log on neighboring computer CDA-ACCT-1 

powershell

powershell exercise in classs
Invoke-Command -ComputerName CDA-ACCT-1,CDA-ACCT-2,CDA-ACCT-3 -ScriptBlock {Get-WinEvent -LogName System | where -prop id -eq 7045 | Format-List *}

Invoke-Command -ComputerName CDA-ACCT-3 -ScriptBlock {Get-WinEvent -LogName System | where -prop id -eq 7045 | select message | Format-List *}

powershell exercise in classs

powershell

Get-WinEvent -LogName 'Microsoft-Windows-TaskScheduler/Operational' -ErrorAction SilentlyContinue | Select-Object -First 10 | Format-List * : List the 10 most recent entries in the Task Scheduler operational log file

Get-WinEvent -LogName 'Microsoft-Windows-Powershell/Operational' -ErrorAction SilentlyContinue | Select-Object -First 10 | Format-List * : list the most recent 10 entries in the PowerShell operational log file

powershell
commands



rcs08-portal.pcte.mil

binary path is c:->.exe
binary is just the .exe

hkcu-.run
hklm->run
regedit







































